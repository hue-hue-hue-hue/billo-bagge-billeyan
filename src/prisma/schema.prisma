generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// type ConversationsChats {
//   message String
//   order   Int
//   role    String
// }

// model conversations {
//   id    String               @id @map("_id")
//   chats ConversationsChats[]
//   title String
// }

model Chat {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String    @default("New Chat")
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isDeleted     Boolean   @default(false)
}

model Message {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  chatId        String    @db.ObjectId
  chat          Chat      @relation(fields: [chatId], references: [id])
  role          MessageRole
  content       String
  createdAt     DateTime  @default(now())
  metadata      Json?
}

enum MessageRole {
  USER
  ASSISTANT
}


type DocumentsInsights {
  cultural_considerations   String
  financial_risk_assessment String
  operational_compatibility String
  regulatory_compliance     String
}

// model Evaluation {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }

// model Result {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
// }


model MergerAcquisition {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  Definitive_Agreement String            @map("Definitive Agreement")
  Due_Diligence        String            @map("Due Diligence")
  Letter_of_Intent     String            @map("Letter of Intent")
  NDA                  String
  Term_Sheet           String            @map("Term Sheet")
  conversation_id      String
  insights             DocumentsInsights
}
